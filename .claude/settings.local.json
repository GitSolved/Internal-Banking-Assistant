{
  "permissions": {
    "allow": [
      "Bash(taskkill:*)",
      "Bash(python:*)",
      "Bash(tasklist)",
      "Bash(cat:*)",
      "Read(//c/Users/Lenovo/Desktop/NYU/Application/**)",
      "Bash(curl:*)",
      "Bash(poetry run:*)",
      "Bash(if exist \"local_data\\internal_assistant\\.lock\" del /F \"local_data\\internal_assistant\\.lock\")",
      "Bash(if exist \"local_data\\internal_assistant\\.lock\" del /F /Q \"local_data\\internal_assistant\\.lock\")",
      "Bash(del:*)",
      "Bash(if exist test_upload.py del test_upload.py)",
      "Bash(if exist test_upload_investigation.py del test_upload_investigation.py)",
      "Bash(if exist test_upload_new_fix.py del test_upload_new_fix.py)",
      "Bash(if exist test_error_scenarios.py del test_error_scenarios.py)",
      "Bash(if exist toolsverify.py del toolsverify.py)",
      "Bash(if exist toolsmaster_verify.py del toolsmaster_verify.py)",
      "Bash(if exist toolssimple_verify.py del toolssimple_verify.py)",
      "Bash(if exist toolsverify_simple.py del toolsverify_simple.py)",
      "Bash(if exist toolsverify_environment.py del toolsverify_environment.py)",
      "Bash(if exist toolsverify_test_fixes.py del toolsverify_test_fixes.py)",
      "Bash(if exist toolsverification_utils.py del toolsverification_utils.py)",
      "Bash(if exist toolsrun_app.py del toolsrun_app.py)",
      "Bash(if exist toolslegacy_test_wrapper.py del toolslegacy_test_wrapper.py)",
      "Bash(if exist toolssafe_test_runner.py del toolssafe_test_runner.py)",
      "Bash(if exist toolsfix_docstore_corruption.py del toolsfix_docstore_corruption.py)",
      "Bash(if exist toolssimple_verification.ps1 del toolssimple_verification.ps1)",
      "Bash(if exist toolsenhanced_verification_script.ps1 del toolsenhanced_verification_script.ps1)",
      "Bash(dir /B internal_assistantuicomponents)",
      "Bash(dir /B internal_assistantuistate)",
      "Bash(dir:*)",
      "Read(//c/Users/Lenovo/Desktop/**)",
      "Bash(findstr:*)",
      "Bash(rd:*)",
      "Bash(git log:*)",
      "WebSearch",
      "WebFetch(domain:github.com)",
      "Bash(find:*)",
      "Bash(rm:*)",
      "Bash(tee:*)",
      "Bash(poetry check:*)",
      "Bash(tskill:*)",
      "Bash(awk:*)",
      "Bash(xargs kill:*)",
      "Bash(cmd.exe:*)",
      "Bash(if [ -d \"local_data/internal_assistant/qdrant\" ])",
      "Bash(then echo \"✅ Qdrant directory EXISTS - safe to delete\")",
      "Bash(else echo \"⚠️ Qdrant directory NOT FOUND\")",
      "Bash(fi)",
      "Bash(then echo \"❌ Directory still exists\")",
      "Bash(else echo \"✅ Qdrant directory successfully deleted\")",
      "Bash(if [ -f \"local_data/internal_assistant/docstore.json\" ])",
      "Bash(then echo \"✅ docstore.json preserved\")",
      "Bash(else echo \"⚠️ docstore.json NOT FOUND\")",
      "Bash(robocopy:*)",
      "Bash(xcopy:*)",
      "Bash(powershell:*)",
      "Bash(identify:*)",
      "Bash(timeout:*)",
      "Bash(tasklist:*)",
      "Bash(if exist \"local_data\\internal_assistant\\qdrant\\.lock\" del /F \"local_data\\internal_assistant\\qdrant\\.lock\")",
      "Bash(git clone:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Read(//d/internal-assistant/**)",
      "Bash(test:*)",
      "Bash(git config:*)",
      "Bash(git check-ignore:*)",
      "Bash(git mv:*)",
      "Bash(grep:*)",
      "Bash(xargs:*)",
      "Bash(git rm:*)"
    ],
    "deny": [],
    "ask": [],
    "additionalDirectories": [
      "C:\\Users\\Lenovo\\projects"
    ]
  }
}